<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<title>Lode Runner </title>
	<link rel="stylesheet" type="text/css" href="StyleLoadRunner.css" />
	<script> src = "Briques.js"</script>
	<!-- Code JavaScript local -->
	<script type="text/javascript">
		let objCanvas = null;
		let objC2D = null;
		let objCycleAnimation = null;
		let objImageFond = null;
		let objImageInfoJeu = null;
		let tabObjMurs = null;
		let objImageMurs = null;
		let objMotif = null;
		let objInfoJeu = null;

		let objBriques = null;
		let objEchelles = null;
		let objDragonBalls = null;
		let objCordes = null;

		let objSons = null;

		let objDebut = null;

		let tabBirques = new Array();
		let tabEchelles = new Array();
		let tabDragonBalls = new Array();
		let tabCordes = new Array();

		let objChrono = null;
		let imagePlateforme = new Image();
		let imageEchelle = new Image();
		let imageCorde = new Image();
		let imageBalle1 = new Image();
		let imageBalle2 = new Image();
		let imageBalle3 = new Image();
		let imageBalle4 = new Image();
		let imageBalle5 = new Image();
		let imageBalle6 = new Image();
		let imageBalle7 = new Image();
		let imagePersonnage = new Image();
		let imageGarde = new Image();
		let imagePersonnageversLehaut = new Image();
		let objImageDebut = new Image();
		let objPlateformes = null;
		let objPersonnages = null;
		let tabBalleAttrape = new Array();

		let binDansEscalier = false;
		let binEscalierDessous = false;
		let binBriqueADroite = false;

		let binCorde = false;
		//let binBriqueEnDessous = false;
		let deplacementX = 1;
		let deplacementY = 0;

		let binMonter = false;

		let binChangerNiveau = false;

		let posEchelleY = 0;
		let posEchelleX = 0;

		//let objEchelles2 = null;
		let objEchelles2 = null

		let binApparaitreEchelle = false;
		class Briques {
			constructor(positionX, positionY, positionFinX, positionFinY) {
				this.positionX = positionX;
				this.positionY = positionY;

				this.positionFinX = positionFinX;
				this.positionFinY = positionFinY;
			}

		}


		class Echelles {
			constructor(positionX, positionY, positionFinX, positionFinY) {
				this.positionX = positionX;
				this.positionY = positionY;

				this.positionFinX = positionFinX;
				this.positionFinY = positionFinY;
			}

		}


		class Cordes {
			constructor(positionX, positionY, positionFinX, positionFinY) {
				this.positionX = positionX;
				this.positionY = positionY;

				this.positionFinX = positionFinX;
				this.positionFinY = positionFinY;
			}

		}

		class DragonBalls {
			constructor(positionX, positionY, NoDB, binAttraper) {
				this.positionX = positionX;
				this.positionY = positionY;
				this.NoDB = NoDB;
				this.binAttraper = binAttraper;
			}

		}

		function initAnimation() {
			objCanvas = document.getElementById('monCanvas');
			objC2D = objCanvas.getContext('2d');

			initDebut();
			initImageFond();
			initMurs();
			initInfoJeu();
			initChrono();
			initPlateformesJeu();
			initPersonnage(50, 16);
			initGarde();
			initDessin();
			initSons();
			dessiner(); // Dessiner une première fois
			animer();
			objCanvas.focus()
			objDebut.binDebut = true;
			//if(objDebut.binDebut)
			//	objDebut.sonDebut.play();
			//console.log("Au debut x: " + objPersonnages.PositionXPixel / 15 + ", y: " + objPersonnages.PositionYPixel / 30);


		}
		// Aller chercher l'image de fond
		function initImageFond() {
			objImageFond = new Image();
			objImageFond.src = 'backroundLoadRunner.png';
		}
		function initInfoJeu() {
			objImageInfoJeu = new Image();
			objImageInfoJeu.src = 'dbzNoir.jpg';
			objInfoJeu = new Object();
			objInfoJeu.score = 0
			objInfoJeu.niveau = 1;
			objInfoJeu.vies = 5;
		}
		function initSons() {
			objSons = new Object();
			objSons.ramasseDragonBalls = document.getElementById("sonRamasseDragonBalls");
			objSons.demarrerjeu = document.getElementById('sonDuJeu');
			objSons.binJouer = false;
		}
		function initDebut() {
			objDebut = new Object();
			objDebut.textDebut = "Appuyez sur la barre d'espace sur votre clavier pour jouer! ";
			objDebut.textEnHaut = "Binevenue au jeu Lode Runner!";
			objDebut.sonDebut = document.getElementById("sonDebut");
			objImageDebut.src = 'dbzAuDebut1.png';
			objDebut.binDebut = false;
			//	dessinerDebut();
			//	objDebut.sonDebut.play();

		}

		function initGarde() {
			imageGarde.src = 'BuuGarde.png'
			var random = false;
			objGarde = new Object();
			objGarde.DeplacementHorizontalX = 1;
			objGarde.DeplacementHorizontalY = 1;
			objGarde.binDroite = false;
			objGarde.binGauche = false;

			objGarde.binHaut = false;
			objGarde.binBas = false;
			objGarde.binChute = false;


			for (var i = 0; !random; i++) {
				objGarde.PositionX = Math.floor(Math.random() * 20);
				objGarde.PositionY = Math.floor(Math.random() * 15);

				console.log(objGarde.PositionX + ' - ' + objGarde.PositionY);



				if (objPlateformes.tabPlateformes[objGarde.PositionY][objGarde.PositionX] == 0 && objPlateformes.tabPlateformes[objGarde.PositionY + 1][objGarde.PositionX] == 1) {
					random = true;
				}
			}




			objGarde.PositionXPixel = 35 * 15;
			objGarde.PositionYPixel = 16 * 30;
		}

		function initPersonnage(x, y) {
			imagePersonnage.src = 'GokuMouvement.png'

			objPersonnages = new Object();
			objPersonnages.DeplacementHorizontalX = 1;
			objPersonnages.DeplacementHorizontalY = 1;
			objPersonnages.binDroite = false;
			objPersonnages.binGauche = false;

			objPersonnages.binHaut = false;
			objPersonnages.binBas = false;
			objPersonnages.binChute = false;


			//	objPersonnages.PositionX = 3;
			//	objPersonnages.PositionY = 16;

			objPersonnages.PositionX = x;
			objPersonnages.PositionY = y;

			objPersonnages.PositionXPixel = objPersonnages.PositionX * 15;
			objPersonnages.PositionYPixel = objPersonnages.PositionY * 30;

			objPersonnages.gravite = 0;

		}
		function initPlateformesJeu() {
			objPlateformes = new Object();
			imagePlateforme.src = 'sol2Decoupe.png';
			imageEchelle.src = 'echelleDecoupe.png';
			imageCorde.src = 'rope.png';
			imageBalle1.src = 'balle1.png';
			imageBalle2.src = 'balle2(1).png';
			imageBalle3.src = 'balle3(1).png';
			imageBalle4.src = 'balle4.png';
			imageBalle5.src = 'balle5.png';
			imageBalle6.src = 'balle6.png';
			imageBalle7.src = 'balle7.png';

			objPlateformes.binDessiner = false;
			objPlateformes.tabPlateformes = [


				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1],
				[0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 2, 0, 0],
				[1, 1, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1],
				[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[6, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
				[0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 10, 0, 0, 0],
				[0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
				[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
				[0, 0, 0, 44, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],
				[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];


		}


		function initDessin() {
			let compteur = 0;

			for (var i = 0; i < objPlateformes.tabPlateformes.length; i++) {

				for (var j = 0; j < objPlateformes.tabPlateformes[i].length; j++) {
					if (objPlateformes.tabPlateformes[i][j] == 1) {
						objBriques = new Briques();

						objBriques.PositionX = j * 30;
						objBriques.PositionY = i * 30;

						objBriques.binTrou = false;
						//	console.log(compteur++ + 'PX'+ objBriques.positionX + 'PY' + objBriques.positonY);
						tabBirques.push(objBriques);

						//	alert()
					}
					if (objPlateformes.tabPlateformes[i][j] == 2) {
						objEchelles = new Echelles();

						objEchelles.PositionX = j * 30;
						objEchelles.PositionY = i * 30;

						tabEchelles.push(objEchelles);
					}
					if (objPlateformes.tabPlateformes[i][j] == 3) {
						objCordes = new Cordes();

						objCordes.PositionX = j * 30;
						objCordes.PositionY = i * 30 + 4;

						tabCordes.push(objCordes);
					}
					objDragonBalls = new DragonBalls();
					switch (objPlateformes.tabPlateformes[i][j]) {

						case 4:
							objDragonBalls.positionDragonBallsX = j * 30;
							objDragonBalls.positionDragonBallsY = i * 30;
							objDragonBalls.binAttraper = false;
							objDragonBalls.NoDB = 4;
							tabDragonBalls.push(objDragonBalls);
							break;

						case 5:
							objDragonBalls.positionDragonBallsX = j * 30;
							objDragonBalls.positionDragonBallsY = i * 30;
							objDragonBalls.NoDB = 5;
							objDragonBalls.binAttraper = false;
							tabDragonBalls.push(objDragonBalls); break;
						case 6:
							objDragonBalls.positionDragonBallsX = j * 30;
							objDragonBalls.positionDragonBallsY = i * 30;
							objDragonBalls.NoDB = 6;
							objDragonBalls.binAttraper = false;
							tabDragonBalls.push(objDragonBalls); break;
						case 7:
							objDragonBalls.positionDragonBallsX = j * 30;
							objDragonBalls.positionDragonBallsY = i * 30;
							objDragonBalls.NoDB = 7;
							objDragonBalls.binAttraper = false;
							tabDragonBalls.push(objDragonBalls);
							break;
						case 8:
							objDragonBalls.positionDragonBallsX = j * 30;
							objDragonBalls.positionDragonBallsY = i * 30;
							objDragonBalls.NoDB = 8;
							objDragonBalls.binAttraper = false;
							tabDragonBalls.push(objDragonBalls); break;
						case 9:
							objDragonBalls.positionDragonBallsX = j * 30;
							objDragonBalls.positionDragonBallsY = i * 30;
							objDragonBalls.NoDB = 9;
							objDragonBalls.binAttraper = false;
							tabDragonBalls.push(objDragonBalls); break;
						case 10:
							objDragonBalls.positionDragonBallsX = j * 30;
							objDragonBalls.positionDragonBallsY = i * 30;
							objDragonBalls.NoDB = 10;
							objDragonBalls.binAttraper = false;
							tabDragonBalls.push(objDragonBalls); break;
					}


				}

			}

		}
		//Contruire les murs
		function initMurs() {
			tabObjMurs = new Array();
			let objMur = null;

			objImageMurs = new Image();
			objImageMurs.src = 'dbzMursNoir.jpg';

			// Le mur de gauche (#0)
			objMur = new Object();
			//objMur.objImage = objImageMur;
			objMur.intXDebut = 0;
			objMur.intYDebut = 0;
			objMur.intXFin = Math.floor(objCanvas.width / 30);
			objMur.intYFin = objCanvas.height;
			objMur.strCouleur = 'red';
			tabObjMurs.push(objMur);

			// Le mur du centre (en haut) (#1)
			objMur = new Object();
			//objMur.objImage = objImageMur;
			objMur.intXDebut = 0;
			objMur.intYDebut = 0;
			objMur.intXFin = objCanvas.width;
			objMur.intYFin = Math.floor(objCanvas.width / 30);
			// objMur.strCouleur = 'midnightblue';
			tabObjMurs.push(objMur);

			// Le mur de droite (#2)
			objMur = new Object();
			// objMur.objImage = objImageMur;
			objMur.intXDebut = objCanvas.width;
			objMur.intYDebut = 0;
			objMur.intXFin = objCanvas.width - Math.floor(objCanvas.width / 30);
			objMur.intYFin = objCanvas.height;
			//  objMur.strCouleur = 'midnightblue';
			tabObjMurs.push(objMur);

		}
		function initChrono() {
			objChrono = new Object();

			objChrono.miliSecondes = 0;
			objChrono.secondes = 0;
			objChrono.minutes = 0;
			objChrono.compteurSecondes = 0;
			objChrono.compteutMinutes = 0;
			objChrono.binDemarrerChrono = false;
		}



		// Un cycle d'animation	
		function animer() {
			// Requête pour le prochain cycle
			objCycleAnimation = requestAnimationFrame(animer);

			// Le cycle d'animation
			effacerDessin();
			mettreAjourAnimation();
			dessiner();
		}

		// Arrêter l'animation
		function arreterAnimation() {
			if (objCycleAnimation != null)
				cancelAnimationFrame(objCycleAnimation);
			objCycleAnimation = null;
		}

		// Pour effacer le dessin
		function effacerDessin() {
			objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height);
		}

		// Pour mettre à jour l'animation
		function mettreAjourAnimation() {

			dessinerChronometre();
			bougerGarde();

			if (briqueEnDessousPersonnage() == false && echelleEnDessouspersonnage() == false) {

				objPersonnages.PositionYPixel += 1;
			}



			//	dessinerDebut()
			//	if (objPersonnages.PositionYPixel >= 510 -30) 
			//		objPersonnages.binChute = false;



		}

		// Pour dessiner
		function dessiner() {

			//	objDebut.binDebut = true;
			//console.log(objDebut.binDebut)

			if (objDebut.binDebut) {
				dessinerDebut();
				//	objSons.demarrerjeu.pause();


			}
			else {

				dessinerFond();
				dessinerMurs();
				dessinerScore();
				//dessinerChronometre();
				dessinerPlateformesJeu();
				dessinerPersonnages();
				dessinerGarde();
				objDebut.sonDebut.pause();
				//	objSons.demarrerjeu.play();
			}

		}
		function dessinerDebut() {
			objC2D.save();
			//	if (objDebut.binDebut) {
			objC2D.globalAlpha = 0.3;
			objC2D.drawImage(objImageDebut, 0, 0, objCanvas.width, objCanvas.height);
			objC2D.globalAlpha = 1;
			objDebut.textDebut;
			objC2D.font = '30px fantasy';
			objC2D.textAlign = "center";





			//	objC2D.lineWidth = 3;

			//objC2D.strokeText(objDebut.textDebut, objCanvas.width / 2, objCanvas.height / 2);
			objC2D.fillText(objDebut.textDebut, objCanvas.width / 2, objCanvas.height / 2 - 220);
			objC2D.fillText(objDebut.textEnHaut, objCanvas.width / 2, objCanvas.height / 2 - 280);
			objC2D.strokeStyle = 'black';

			//	objDebut.sonDebut.play();
			//	}
			//objDebut.sonDebut.pause();
			objC2D.restore();

		}
		// Pour dessiner l'image de fond
		function dessinerFond() {
			objC2D.save();  // Sauvegarde le contexte
			objC2D.drawImage(objImageFond, 0, 0, objCanvas.width, objCanvas.height - 130);
			objC2D.restore(); // Restaure le contexte
		}
		function dessinerChronometre() {


			objChrono.miliSecondes++;
			if (objChrono.miliSecondes > 60) {
				objChrono.miliSecondes = 0;
				objChrono.secondes++;
				if (objChrono.secondes > 59) {
					objChrono.secondes = 0;
					objChrono.minutes++;
				}
			}

			objChrono.compteurSecondes = objChrono.secondes < 10 ? "0" + objChrono.secondes : objChrono.secondes;
			objChrono.compteutMinutes = objChrono.minutes < 10 ? "0" + objChrono.minutes : objChrono.minutes;

		}
		function dessinerScore() {
			objC2D.save();  // Sauvegarde le contexte

			//Image drangon ball z
			objC2D.drawImage(objImageInfoJeu, 0, 570, objCanvas.width, 100);




			//Score
			objC2D.beginPath();
			strTexteScore = "Score: " + String(Number(objInfoJeu.score)).padStart(7, '0');
			objC2D.textAlign = "center";
			objC2D.textBaseLine = "bottom";
			objC2D.font = '25pt fantasy';
			//Temps
			objC2D.beginPath();
			strTextTemps = "Temps: ";
			objC2D.textAlign = "center";
			objC2D.textBaseLine = "bottom";
			objC2D.font = '25pt fantasy';

			//chrono
			objC2D.beginPath();
			strTextChrono = objChrono.compteutMinutes + ":" + objChrono.compteurSecondes;
			objC2D.textAlign = "center";
			objC2D.textBaseLine = "bottom";
			objC2D.font = '25pt fantasy';

			//Niveau
			objC2D.beginPath();
			strTexteNiveau = "Niveau: " + objInfoJeu.niveau;
			objC2D.textAlign = "center";
			objC2D.textBaseLine = "bottom";
			objC2D.font = '25pt fantasy';

			//Vies
			objC2D.beginPath();
			strTextVies = "Vies: " + objInfoJeu.vies;
			objC2D.textAlign = "center";
			objC2D.textBaseLine = "bottom";
			objC2D.font = '25pt fantasy';

			//Titre
			objC2D.beginPath();
			strTextTitre = "Lode Runner";
			objC2D.textAlign = "center";
			objC2D.textBaseLine = "bottom";
			objC2D.font = '25pt fantasy';


			objC2D.fillStyle = 'white';

			objC2D.fillText(strTextTitre, objCanvas.width / 2, 29);


			objC2D.fillText(strTexteScore, 150, 610);

			objC2D.fillText(strTextTemps, 112, 650);

			objC2D.fillText(strTextChrono, 200, 650);

			objC2D.fillText(strTexteNiveau, 775, 610);

			objC2D.fillText(strTextVies, 775, 650);








			objC2D.restore(); // Restaure le contexte
		}

		function dessinerPersonnages() { //drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)
			objC2D.save();
			objC2D.translate(30, 30);

			let tailleSpriteX = 23;
			let tailleSpriteY = 30;

			objC2D.drawImage(imagePersonnage, objPersonnages.DeplacementHorizontalX, objPersonnages.DeplacementHorizontalY, tailleSpriteX, tailleSpriteY, objPersonnages.PositionXPixel, objPersonnages.PositionYPixel, 24.2, 30);

			objC2D.restore();
		}
		function dessinerGarde() { //drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)
			objC2D.save();
			objC2D.translate(30, 30);

			let tailleSpriteX = 19;
			let tailleSpriteY = 30;

			objC2D.drawImage(imageGarde, objGarde.DeplacementHorizontalX, objGarde.DeplacementHorizontalY, tailleSpriteX, tailleSpriteY, objGarde.PositionXPixel, objGarde.PositionYPixel, 24.2, 30);

			objC2D.restore();
		}


		function dessinerMurs() {
			objC2D.save();

			objMotif = objC2D.createPattern(objImageMurs, 'repeat');

			for (let intNoMur = 0; intNoMur < tabObjMurs.length; intNoMur++) {
				let objMur = tabObjMurs[intNoMur];


				objC2D.fillStyle = objMotif;
				objC2D.beginPath();
				objC2D.moveTo(objMur.intXDebut, objMur.intYDebut);
				objC2D.lineTo(objMur.intXFin, objMur.intYDebut);
				objC2D.lineTo(objMur.intXFin, objMur.intYFin);
				objC2D.lineTo(objMur.intXDebut, objMur.intYFin);
				objC2D.closePath();
				objC2D.fill();

			}


			objC2D.restore();
		}

		function dessinerPlateformesJeu() {
			objC2D.save();
			objC2D.translate(30, 30);

					console.log("binaparaitreechelle = " + binApparaitreEchelle)
			//binApparaitreEchelle = false;
			if (tabBalleAttrape.length == 1) {
				binApparaitreEchelle = true;
			}

			if (binApparaitreEchelle) {
				//changerNiveau()
				objEchelles2 = new Echelles();

				//	binApparaitreEchelle = true
				objPlateformes.tabPlateformes[4][20] = 2
				objPlateformes.tabPlateformes[3][20] = 2
				objPlateformes.tabPlateformes[2][20] = 2
				objPlateformes.tabPlateformes[1][20] = 2
				objPlateformes.tabPlateformes[0][20] = 2
				//	for (var i = 0; i < objPlateformes.tabPlateformes.length; i++) {

				//	for (var j = 0; j < objPlateformes.tabPlateformes[i].length; j++) {
				if (objPlateformes.tabPlateformes[0][20] == 2) {

					objEchelles2 = new Echelles();
					objEchelles2.PositionX = 20 * 30;
					objEchelles2.PositionY = 0 * 30;

					posEchelleX = objEchelles2.PositionX;
					posEchelleY = objEchelles2.PositionY + 30
					tabEchelles.push(objEchelles2);

				}
				if (objPlateformes.tabPlateformes[1][20] == 2) {
					objEchelles2 = new Echelles();

					objEchelles2.PositionX = 20 * 30;
					objEchelles2.PositionY = 1 * 30;
					tabEchelles.push(objEchelles2);

				}
				if (objPlateformes.tabPlateformes[2][20] == 2) {
					objEchelles2 = new Echelles();

					objEchelles2.PositionX = 20 * 30;
					objEchelles2.PositionY = 2 * 30;
					tabEchelles.push(objEchelles2);

				}
				if (objPlateformes.tabPlateformes[3][20] == 2) {
					objEchelles2 = new Echelles();

					objEchelles2.PositionX = 20 * 30;
					objEchelles2.PositionY = 3 * 30;
					tabEchelles.push(objEchelles2);

				}
				if (objPlateformes.tabPlateformes[4][20] == 2) {
					objEchelles2 = new Echelles();

					objEchelles2.PositionX = 20 * 30;
					objEchelles2.PositionY = 4 * 30;
					tabEchelles.push(objEchelles2);

				}



			}
			else {
				//	console.log("disparaite echelle")
				//	disparaitreEchelle()

				disparaitreEchelle()

				console.log("dimelo")
			}




			//	
			for (var i = 0; i < tabBirques.length; i++) {
				objC2D.drawImage(imagePlateforme, tabBirques[i].PositionX, tabBirques[i].PositionY);
			}
			for (var i = 0; i < tabEchelles.length; i++) {
				objC2D.drawImage(imageEchelle, tabEchelles[i].PositionX, tabEchelles[i].PositionY);
			}

			for (var i = 0; i < tabCordes.length; i++) {
				objC2D.drawImage(imageCorde, tabCordes[i].PositionX, tabCordes[i].PositionY);
			}
			//console.log("length tableau : " + tabDragonBalls.length)
			for (var i = 0; i < tabDragonBalls.length; i++) {
				switch (tabDragonBalls[i].NoDB) {
					case 4:
						if (tabDragonBalls[i].binAttraper == false) {
							objC2D.drawImage(imageBalle1, tabDragonBalls[i].positionDragonBallsX, tabDragonBalls[i].positionDragonBallsY);
						}
						break;

					case 5:
						if (tabDragonBalls[i].binAttraper == false) {
							objC2D.drawImage(imageBalle2, tabDragonBalls[i].positionDragonBallsX, tabDragonBalls[i].positionDragonBallsY);
						}
						break;

					case 6:
						if (tabDragonBalls[i].binAttraper == false) {
							objC2D.drawImage(imageBalle3, tabDragonBalls[i].positionDragonBallsX, tabDragonBalls[i].positionDragonBallsY);
						}
						break;

					case 7:
						if (tabDragonBalls[i].binAttraper == false) {
							objC2D.drawImage(imageBalle4, tabDragonBalls[i].positionDragonBallsX, tabDragonBalls[i].positionDragonBallsY);
						}
						break;

					case 8:
						if (tabDragonBalls[i].binAttraper == false) {
							objC2D.drawImage(imageBalle5, tabDragonBalls[i].positionDragonBallsX, tabDragonBalls[i].positionDragonBallsY);
						}
						break;

					case 9:
						if (tabDragonBalls[i].binAttraper == false) {
							objC2D.drawImage(imageBalle6, tabDragonBalls[i].positionDragonBallsX, tabDragonBalls[i].positionDragonBallsY);
						}
						break;

					case 10:
						if (tabDragonBalls[i].binAttraper == false) {
							objC2D.drawImage(imageBalle7, tabDragonBalls[i].positionDragonBallsX, tabDragonBalls[i].positionDragonBallsY);
						}
						break;

					default:
						break;
				}
			}


			objC2D.restore();
		}
		function debutDuJeu() {
			objC2D.save();

			switch (event.keyCode) {
				case 32:
					objDebut.binDebut = false;
					//	objSons.demarrerjeu.play();
					//	console.log("allo")
					break;
			}


			objC2D.restore();
		}

		function deplacerPersonnages() {

			objC2D.save();
			//objC2D.translate(30, 30);

			//console.log("binChangerNiveau = " + binChangerNiveau)



			switch (event.keyCode) {
				case 39:// Flèche-à-droite



					binDansEscalier = false;
					objPersonnages.binHaut = false;
					objPersonnages.binBas = false;

					if (objPersonnages.binGauche) {
						objPersonnages.DeplacementHorizontalX = 459.8;
						objPersonnages.binGauche = false;
					}
					//on va augmenter les x pour aller a la prochaine image
					objPersonnages.DeplacementHorizontalX += 24.2;
					objPersonnages.binDroite = true;
					//on va voir si on a atteint la fin du sprite pour recommencer afin  de faire lanimation lorsquil va
					if (objPersonnages.DeplacementHorizontalX >= 240) {
						objPersonnages.DeplacementHorizontalX = 144.2;
					}


					if (objPersonnages.PositionXPixel < objCanvas.width - 90) {
						//	objPersonnages.PositionXPixel += 15;
						let binBriqueDroiteSurMonY = false;


						for (let k = 0; k < tabBirques.length && !binBriqueDroiteSurMonY; k++) {
							if (tabBirques[k].PositionY == objPersonnages.PositionYPixel || tabBirques[k].PositionY - 15 == objPersonnages.PositionYPixel || tabBirques[k].PositionY + 15 == objPersonnages.PositionYPixel) {

								//	console.log('Position Brique : ' + (tabBirques[k].PositionX+30) + '- PositionPersonnage : ' + objPersonnages.PositionXPixel);
								if (tabBirques[k].PositionX - 30 != objPersonnages.PositionXPixel) {

									binBriqueDroiteSurMonY = false;
								}
								else {
									binBriqueDroiteSurMonY = true;
								}
							} else {
								binBriqueDroiteSurMonY = false;
							}
						}

						if (!binBriqueDroiteSurMonY) {
							objPersonnages.PositionXPixel += 15;
						}

						//let comptBalles = 0;

						for (let i = 0; i < tabDragonBalls.length; i++) {


							if (tabDragonBalls[i].binAttraper == false && objPersonnages.PositionXPixel >= tabDragonBalls[i].positionDragonBallsX - 15
								&& objPersonnages.PositionXPixel <= tabDragonBalls[i].positionDragonBallsX + 24
								&& objPersonnages.PositionYPixel == tabDragonBalls[i].positionDragonBallsY) {


								tabBalleAttrape.push(tabDragonBalls[i].NoDB);
								//console.log(tabBalleAttrape.length);
								tabDragonBalls[i].binAttraper = true;
								//	if (tabDragonBalls[i].binAttraper) {

								//	objSons.ramasseDragonBalls.play();


								//	console.log("tabDragonballs : "+ tabDragonBalls.length)
								//	}

								//	objInfoJeu.score+=250;

								let intTest = String(250).padStart(7, '0');

								let intTest2 = String(250).padStart(7, '0');

								objInfoJeu.score += 250;

								//	console.log(String(Number(intTest)+Number(intTest2)).padStart(7,'0') )
								//	console.log("score " + Number(objInfoJeu.score))
							}
						}


					}



					break;
				case 37:// Flèche-à-gauche
					binDansEscalier = false;
					objPersonnages.binGauche = true;



					if (cordeSurPersonnage()) {
						objPersonnages.DeplacementHorizontalX = 508;
					} else {
						if (objPersonnages.binDroite) {
							objPersonnages.DeplacementHorizontalX = 459.8;
							objPersonnages.binDroite = false;
						}
					}





















					/*	if (binCorde) {
							if(objPersonnages.DeplacementHorizontalX <= 508.125){
								objPersonnages.DeplacementHorizontalX = 664.875;
							}
							
							objPersonnages.DeplacementHorizontalX -= 26.125;
						}else{
							
							if(objPersonnages.DeplacementHorizontalX > 483 && objPersonnages.DeplacementHorizontalX < 264){
								objPersonnages.DeplacementHorizontalX = 340;
							}
							objPersonnages.DeplacementHorizontalX -= 24.2;
						} if (objPersonnages.binDroite) {
							objPersonnages.DeplacementHorizontalX = 459.8;
							objPersonnages.binDroite = false;
						}else{
	
						}*/






					//	if(!binCorde){

					//	}

					//on va voir si on a atteint la fin du sprite pour recommencer afin  de faire lanimation lorsquil va
					objPersonnages.DeplacementHorizontalX -= 24.2;
					if (objPersonnages.DeplacementHorizontalX <= 264) {

						objPersonnages.DeplacementHorizontalX = 340;
					}
					objPersonnages.binHaut = false;
					objPersonnages.binBas = false;


					if (objPersonnages.PositionXPixel > 0) {
						let binBriqueSurMonY = false;

						for (let j = 0; j < tabBirques.length && !binBriqueSurMonY; j++) {
							if (tabBirques[j].PositionY == objPersonnages.PositionYPixel || tabBirques[j].PositionY - 15 == objPersonnages.PositionYPixel || tabBirques[j].PositionY + 15 == objPersonnages.PositionYPixel) {

								if (tabBirques[j].PositionX + 30 != objPersonnages.PositionXPixel) {
									binBriqueSurMonY = false;
								}
								else {
									binBriqueSurMonY = true;
								}
							} else {
								binBriqueSurMonY = false;
							}
						}

						if (!binBriqueSurMonY) {
							objPersonnages.PositionXPixel -= 15;
						}






						for (let i = 0; i < tabDragonBalls.length; i++) {

							if (tabDragonBalls[i].binAttraper == false && objPersonnages.PositionXPixel >= tabDragonBalls[i].positionDragonBallsX - 15 && objPersonnages.PositionXPixel <= tabDragonBalls[i].positionDragonBallsX + 24 && objPersonnages.PositionYPixel == tabDragonBalls[i].positionDragonBallsY) {

								tabBalleAttrape.push(tabDragonBalls[i].NoDB);
								tabDragonBalls[i].binAttraper = true;
								if (tabDragonBalls[i].binAttraper) {
									//	objSons.ramasseDragonBalls.play();
								}

								objInfoJeu.score += 250;
							}
						}


					}

					break;
				case 38:// Flèche-en-haut
					//	console.log("position y goku :" + objPersonnages.PositionYPixel)
					//console.log(objEchelles2.PositionY)




					if (objPersonnages.PositionYPixel > 0) {
						for (let i = 0; i < tabEchelles.length; i++) {
							//console.log("position y echelle : " + tabEchelles[i].PositionY)
							if (objPersonnages.PositionYPixel <= tabEchelles[i].PositionY &&
								objPersonnages.PositionYPixel > tabEchelles[i].PositionY - 30 &&
								objPersonnages.PositionXPixel == tabEchelles[i].PositionX) {
								//	console.log("derniere echelle")
								binDansEscalier = true;
								if (objPersonnages.binHaut) {
									objPersonnages.binBas = false;
									if (objPersonnages.DeplacementHorizontalX == 691) {

										objPersonnages.DeplacementHorizontalX = 482;
									} else {
										objPersonnages.DeplacementHorizontalX += 26.125;
									}
								} else {
									//	console.log(objPersonnages.DeplacementHorizontalX);
									objPersonnages.DeplacementHorizontalX = 482;
									objPersonnages.binHaut = true;
									objPersonnages.binBas = false;
								}

								objPersonnages.PositionYPixel -= 15;

								break;

							}
							//voir si il est en haut de lechelle pour passer au prochain niveau


						}

						/*	for (var i = 0; i < tabEchelles.length; i++) {
								//console.log("pos echelle " + tabEchelles[i].PositionY)
								if (tabEchelles[i].PositionY == 30) {
	
									console.log("allo")
	
								}
	
							}*/


					}
					//changement de niveau***
					//console.log("position derniere echelle " + posEchelleX+", "+posEchelleY)

					//console.log("position goku dans les y " + objPersonnages.PositionYPixel)


					if (objPersonnages.PositionYPixel == posEchelleY - 30) {
						console.log("goku est dans la derniere echelle")
						
						//effacerDessin()
						//dessiner()
						binApparaitreEchelle = false;
						//initPlateformesJeu()
						initChrono()
						initPersonnage(50,4)
						initGarde()
					//	initInfoJeu()
						objInfoJeu.niveau+=1;
						objInfoJeu.score= 0;
						initDessin()



			
					}



					//	changerNiveau()
					break;
				case 40: // Flèche-en-bas
					if (objPersonnages.PositionYPixel < 470) {


						for (let i = 0; i < tabEchelles.length; i++) {
							if (objPersonnages.PositionXPixel == tabEchelles[i].PositionX) {
								if (objPersonnages.PositionYPixel == tabEchelles[i].PositionY - 30) {
									objPersonnages.PositionYPixel += 15;
									if (objPersonnages.binBas) {
										objPersonnages.binHaut = false;
										//console.log(objPersonnages.DeplacementHorizontalX + 'a');
										if (objPersonnages.DeplacementHorizontalX == 482) {
											objPersonnages.DeplacementHorizontalX = 664.875;
										} else {

											objPersonnages.DeplacementHorizontalX -= 26.125;
										}
									} else {
										//	console.log(objPersonnages.DeplacementHorizontalX + 'a');
										objPersonnages.DeplacementHorizontalX = 664.875;
										objPersonnages.binBas = true;
										objPersonnages.binHaut = false;
									}

								} else {
									if (objPersonnages.PositionYPixel + 15 >= tabEchelles[i].PositionY && objPersonnages.PositionYPixel + 45 <= tabEchelles[i].PositionY + 30) {
										if (objPersonnages.binBas) {
											objPersonnages.binHaut = false;
											//console.log(objPersonnages.DeplacementHorizontalX + 'a');
											if (objPersonnages.DeplacementHorizontalX == 482) {
												objPersonnages.DeplacementHorizontalX = 664.875;
											} else {

												objPersonnages.DeplacementHorizontalX -= 26.125;
											}
										} else {
											//	console.log(objPersonnages.DeplacementHorizontalX + 'a');
											objPersonnages.DeplacementHorizontalX = 664.875;
											objPersonnages.binBas = true;
											objPersonnages.binHaut = false;
										}

										objPersonnages.PositionYPixel += 15;
										break;
									}
								}
							}
						}

					}
					break;
			}


			objC2D.restore();
		}
		function cordeSurPersonnage() {

		}

		function disparaitreEchelle() {
			binApparaitreEchelle = false;
			objPlateformes.tabPlateformes[4][20] = 0
			objPlateformes.tabPlateformes[3][20] = 0
			objPlateformes.tabPlateformes[2][20] = 0
			objPlateformes.tabPlateformes[1][20] = 0
			objPlateformes.tabPlateformes[0][20] = 0
			//	for (var i = 0; i < objPlateformes.tabPlateformes.length; i++) {

			//	for (var j = 0; j < objPlateformes.tabPlateformes[i].length; j++) {
			if (objPlateformes.tabPlateformes[0][20] == 0) {
				objEchelles3 = new Echelles();

				objEchelles3.PositionX = 20 * 30;
				objEchelles3.PositionY = 0 * 30;
				tabEchelles.push(objEchelles3);

			}
			if (objPlateformes.tabPlateformes[1][20] == 0) {
				objEchelles3 = new Echelles();

				objEchelles3.PositionX = 20 * 30;
				objEchelles3.PositionY = 1 * 30;
				tabEchelles.push(objEchelles3);

			}
			if (objPlateformes.tabPlateformes[2][20] == 0) {
				objEchelles3 = new Echelles();

				objEchelles3.PositionX = 20 * 30;
				objEchelles3.PositionY = 2 * 30;
				tabEchelles.push(objEchelles3);

			}
			if (objPlateformes.tabPlateformes[3][20] == 0) {
				objEchelles3 = new Echelles();

				objEchelles3.PositionX = 20 * 30;
				objEchelles3.PositionY = 3 * 30;
				tabEchelles.push(objEchelles3);

			}
			if (objPlateformes.tabPlateformes[4][20] == 0) {
				objEchelles3 = new Echelles();

				objEchelles3.PositionX = 20 * 30;
				objEchelles3.PositionY = 4 * 30;
				tabEchelles.push(objEchelles3);

			}
		}
		function changerNiveau() {
			//s'il prend les 7 dragon balls, il faut que je dessine une echelle(dans dessiner palteforme jeu)





		}


		function briqueEnDessousPersonnage() {
			let binBriqueEnDessous = false;
<<<<<<< HEAD
			console.log("personnage : Y = " + Math.round(objPersonnages.PositionYPixel + 32));
=======
			//	console.log("personnage : Y = " + Math.round(objPersonnages.PositionYPixel + 32));
>>>>>>> c27e0e3a0fd7b1459708841a6915bd03a7957ed5



			//BRIQUE
			for (let h = 0; h < tabBirques.length; h++) {
				//	console.log("briques : Y = " + (tabBirques[h].PositionY));
				if (Math.round(objPersonnages.PositionYPixel) + 32 <= tabBirques[h].PositionY + 2 && Math.round(objPersonnages.PositionYPixel) + 28 >= tabBirques[h].PositionY - 2 &&
					objPersonnages.PositionXPixel >= tabBirques[h].PositionX - 15 &&
					objPersonnages.PositionXPixel <= tabBirques[h].PositionX + 15) { //il y a qqchose en dessous
					binBriqueEnDessous = true;

					break;
				}
				else { // il y a rien
					binBriqueEnDessous = false;
				}
			}








			return binBriqueEnDessous;
		}
		function echelleEnDessouspersonnage() {
			let binEchelleEnDessous = false;
			//ECHELLE
			for (let g = 0; g < tabEchelles.length; g++) {
				//console.log("echelle : Y = " + tabEchelles[g].PositionY + 'X = ' + tabEchelles[g].PositionX);
				//console.log("personnage : Y = " + (objPersonnages.PositionYPixel) + '  X= ' + objPersonnages.PositionXPixel);
				/*	if (objPersonnages.PositionYPixel == tabEchelles[g].PositionY //lorsquu'il est sur le mem niveau
						&& objPersonnages.PositionXPixel <= tabEchelles[g].PositionX + 30
						&& objPersonnages.PositionXPixel >= tabEchelles[g].PositionX) {
						binEchelleEnDessous = true;
						break;
	
					} else if (objPersonnages.PositionYPixel + 30 == tabEchelles[g].PositionY //lorsqu'il est en bas
						&& objPersonnages.PositionXPixel <= tabEchelles[g].PositionX + 30
						&& objPersonnages.PositionXPixel >= tabEchelles[g].PositionX) {
						binEchelleEnDessous = true;
						console.log("echelle : Y = " + tabEchelles[g].PositionY + 'X = ' + tabEchelles[g].PositionX);
						console.log("personnage : Y = " + (objPersonnages.PositionYPixel) + '  X= ' + objPersonnages.PositionXPixel);
						break;
					}
					else {
						binEchelleEnDessous = false;
					}*/
				if (objPersonnages.PositionYPixel <= tabEchelles[g].PositionY
					&& objPersonnages.PositionYPixel >= tabEchelles[g].PositionY - 30
					&& objPersonnages.PositionXPixel == tabEchelles[g].PositionX) {
					binEchelleEnDessous = true;
					break;
				} else {
					binEchelleEnDessous = false;
				}

			}

			return binEchelleEnDessous;

		}


		function bougerGarde() {

<<<<<<< HEAD
				//	console.log(binMonter);
					
				/*		 
						for(let i = 0; i< tabEchelles.length ;i++){
							if(objGarde.PositionYPixel <= tabEchelles[i].PositionY && objGarde.PositionYPixel > tabEchelles[i].PositionY - 30
								&& objGarde.PositionXPixel >= tabEchelles[i].PositionX
								&& objGarde.PositionXPixel <= tabEchelles[i].PositionX +30){
		 							deplacementX = 0;
									binMonter =true;
									break;
								}
								else{
									binMonter =false;
								}
						}
						
						if(binMonter){
							objGarde.PositionYPixel -= 1;
						}else{
						//	
						 	if (objGarde.PositionXPixel >= 870) {
								deplacementX = deplacementX * -1;
							}else if(objGarde.PositionXPixel == 0){
								deplacementX = deplacementX * -1;
							}else{
								//deplacementX = deplacementX * -1;
							}
							console.log(objGarde.PositionXPixel);
						}
		
						

					objGarde.PositionXPixel += deplacementX;
					*/
		
=======
			//	console.log(binMonter);


			for (let i = 0; i < tabEchelles.length; i++) {
				if (objGarde.PositionYPixel <= tabEchelles[i].PositionY && objGarde.PositionYPixel > tabEchelles[i].PositionY - 30
					&& objGarde.PositionXPixel >= tabEchelles[i].PositionX
					&& objGarde.PositionXPixel <= tabEchelles[i].PositionX + 30) {
					deplacementX = 0;
					binMonter = true;
					break;
				}
				else {
					binMonter = false;
				}
			}

			if (binMonter) {
				objGarde.PositionYPixel -= 1;
			} else {
				if (objGarde.PositionXPixel > 870) {
					deplacementX = -1;
				} else if (objGarde.PositionXPixel <= 10) {
					deplacementX = 1;
				} else {
					deplacementX = 1;
				}
			}



			objGarde.PositionXPixel += deplacementX;

>>>>>>> c27e0e3a0fd7b1459708841a6915bd03a7957ed5
		}


		function cordeSurPersonnage() {
			binCorde = false;

			for (let i = 0; i < tabCordes.length && !binCorde; i++) {
				if (objPersonnages.PositionYPixel + 4 == tabCordes[i].PositionY
					&& objPersonnages.PositionXPixel <= tabCordes[i].PositionX + 30
					&& objPersonnages.PositionXPixel >= tabCordes[i].PositionX) {
					binCorde = true;


				} else {
					binCorde = false;
				}
			}
			return binCorde;
		}
	</script>
</head>

<body onload="initAnimation()">
	<canvas id="monCanvas" width="960" height="670" tabindex="1" onkeydown="deplacerPersonnages()"
		onkeyup="debutDuJeu()">
		Votre navigateur ne supporte pas la balise canvas
	</canvas>
	<audio id="sonRamasseDragonBalls">
		<source src="ramasseDragonBalls.mp3" type="audio/mpeg" />
		Ce navigateur ne gère pas l’audio.
		<!--    <a onClick="jouerSon()">-->
	</audio>
	<audio id="sonDuJeu">
		<source src="chala.mp3" type="audio/mpeg" />
		Ce navigateur ne gère pas l’audio.
		<!--    <a onClick="jouerSon()">-->
	</audio>
	<audio id="sonDebut">
		<source src="prologue.mp3" type="audio/mpeg" />
		Ce navigateur ne gère pas l’audio.
		<!--    <a onClick="jouerSon()">-->
	</audio>



</body>

</html>